{
  "version": 3,
  "sources": ["../../../src/lib/mdx/remarkTocHeadings.ts", "../../../contentlayer.config.ts"],
  "sourcesContent": ["import { VFile } from \"vfile\"\nimport { Parent } from 'unist'\nimport { visit } from 'unist-util-visit'\nimport { slug } from 'github-slugger'\nimport { toString } from 'mdast-util-to-string'\nimport { remark } from 'remark'\n\nexport type Toc = {\n    value: string\n    depth: number\n    url: string\n}\n\nexport const remarkTocHeadings = () => (tree: Parent, file: VFile) => {\n    const toc: Toc[] = []\n\n    visit(tree, 'heading', (node: { depth: number }) => {\n        const textContent = toString(node)\n        toc.push({\n            value: textContent,\n            url: '#' + slug(toString(node)),\n            depth: node.depth,\n        })\n    })\n\n    file.data.toc = toc\n}\n\nexport const extractTocHeadings = async (markdown: string): Promise<Toc> =>\n    (await remark().use(remarkTocHeadings).process(markdown)).data as any\n", "import { extractTocHeadings } from './src/lib/mdx'\nimport { makeSource, defineDocumentType, ComputedFields } from '@contentlayer/source-files'\n\nimport remarkGfm from 'remark-gfm'\nimport remarkSectionize from 'remark-sectionize'\nimport rehypeSlug from 'rehype-slug'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypeCodeTitles from 'rehype-code-titles'\nimport rehypePrism from 'rehype-prism-plus'\nimport rehypePresetMinify from 'rehype-preset-minify'\n\n\nconst computedFields: ComputedFields = {\n    toc: { type: \"json\", resolve: (doc) => extractTocHeadings(doc.body.raw) },\n    slug: {\n        type: 'string',\n        resolve: (doc) =>\n            `/writing/${doc._raw.sourceFileName.replace(/\\.mdx$/, '')}`,\n    },\n}\n\nconst Post = defineDocumentType(() => ({\n    name: \"Post\",\n    filePathPattern: '**/*.md',\n    contentType: \"mdx\",\n    fields: {\n        title: { type: \"string\", required: true },\n        description: { type: 'string', required: true },\n        published: { type: 'string', required: true },\n    },\n    computedFields,\n}))\nexport default makeSource({\n    contentDirPath: \"posts\",\n    documentTypes: [Post],\n    mdx: {\n        remarkPlugins: [remarkGfm, remarkSectionize],\n        rehypePlugins: [\n            rehypeSlug,\n            rehypeCodeTitles,\n            rehypePrism,\n            rehypePresetMinify,\n            [rehypeAutolinkHeadings, { properties: { className: ['anchor'] } }],\n        ]\n\n    }\n})"],
  "mappings": ";AAEA,SAAS,aAAa;AACtB,SAAS,YAAY;AACrB,SAAS,gBAAgB;AACzB,SAAS,cAAc;AAQhB,IAAM,oBAAoB,MAAM,CAAC,MAAc,SAAgB;AAClE,QAAM,MAAa,CAAC;AAEpB,QAAM,MAAM,WAAW,CAAC,SAA4B;AAChD,UAAM,cAAc,SAAS,IAAI;AACjC,QAAI,KAAK;AAAA,MACL,OAAO;AAAA,MACP,KAAK,MAAM,KAAK,SAAS,IAAI,CAAC;AAAA,MAC9B,OAAO,KAAK;AAAA,IAChB,CAAC;AAAA,EACL,CAAC;AAED,OAAK,KAAK,MAAM;AACpB;AAEO,IAAM,qBAAqB,OAAO,cACpC,MAAM,OAAO,EAAE,IAAI,iBAAiB,EAAE,QAAQ,QAAQ,GAAG;;;AC5B9D,SAAS,YAAY,0BAA0C;AAE/D,OAAO,eAAe;AACtB,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AACnC,OAAO,sBAAsB;AAC7B,OAAO,iBAAiB;AACxB,OAAO,wBAAwB;AAG/B,IAAM,iBAAiC;AAAA,EACnC,KAAK,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAQ,mBAAmB,IAAI,KAAK,GAAG,EAAE;AAAA,EACxE,MAAM;AAAA,IACF,MAAM;AAAA,IACN,SAAS,CAAC,QACN,YAAY,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE,CAAC;AAAA,EACjE;AACJ;AAEA,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACnC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,WAAW,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EAChD;AAAA,EACA;AACJ,EAAE;AACF,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACD,eAAe,CAAC,WAAW,gBAAgB;AAAA,IAC3C,eAAe;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC,wBAAwB,EAAE,YAAY,EAAE,WAAW,CAAC,QAAQ,EAAE,EAAE,CAAC;AAAA,IACtE;AAAA,EAEJ;AACJ,CAAC;",
  "names": []
}
